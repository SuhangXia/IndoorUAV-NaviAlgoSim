# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/Bspline.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class Bspline(genpy.Message):
  _md5sum = "b8380218fb47e65620f86497dd7aa15f"
  _type = "quadrotor_msgs/Bspline"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# the action command for trajectory server.
uint32 ACTION_ADD                  =   1
uint32 ACTION_ABORT                =   2
uint32 ACTION_WARN_START           =   3
uint32 ACTION_WARN_FINAL           =   4
uint32 ACTION_WARN_IMPOSSIBLE      =   5
uint32 action

int32 order
int64 traj_id
float64[] knots
geometry_msgs/Point[] pts
time start_time
float64 time_extra
float64 replan_to_global_time
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  ACTION_ADD = 1
  ACTION_ABORT = 2
  ACTION_WARN_START = 3
  ACTION_WARN_FINAL = 4
  ACTION_WARN_IMPOSSIBLE = 5

  __slots__ = ['action','order','traj_id','knots','pts','start_time','time_extra','replan_to_global_time']
  _slot_types = ['uint32','int32','int64','float64[]','geometry_msgs/Point[]','time','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,order,traj_id,knots,pts,start_time,time_extra,replan_to_global_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bspline, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
      if self.order is None:
        self.order = 0
      if self.traj_id is None:
        self.traj_id = 0
      if self.knots is None:
        self.knots = []
      if self.pts is None:
        self.pts = []
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.time_extra is None:
        self.time_extra = 0.
      if self.replan_to_global_time is None:
        self.replan_to_global_time = 0.
    else:
      self.action = 0
      self.order = 0
      self.traj_id = 0
      self.knots = []
      self.pts = []
      self.start_time = genpy.Time()
      self.time_extra = 0.
      self.replan_to_global_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Iiq().pack(_x.action, _x.order, _x.traj_id))
      length = len(self.knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.knots))
      length = len(self.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2I2d().pack(_x.start_time.secs, _x.start_time.nsecs, _x.time_extra, _x.replan_to_global_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pts is None:
        self.pts = None
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.action, _x.order, _x.traj_id,) = _get_struct_Iiq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.knots = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pts.append(val1)
      _x = self
      start = end
      end += 24
      (_x.start_time.secs, _x.start_time.nsecs, _x.time_extra, _x.replan_to_global_time,) = _get_struct_2I2d().unpack(str[start:end])
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Iiq().pack(_x.action, _x.order, _x.traj_id))
      length = len(self.knots)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.knots.tostring())
      length = len(self.pts)
      buff.write(_struct_I.pack(length))
      for val1 in self.pts:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_2I2d().pack(_x.start_time.secs, _x.start_time.nsecs, _x.time_extra, _x.replan_to_global_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pts is None:
        self.pts = None
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.action, _x.order, _x.traj_id,) = _get_struct_Iiq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.knots = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pts = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pts.append(val1)
      _x = self
      start = end
      end += 24
      (_x.start_time.secs, _x.start_time.nsecs, _x.time_extra, _x.replan_to_global_time,) = _get_struct_2I2d().unpack(str[start:end])
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2d = None
def _get_struct_2I2d():
    global _struct_2I2d
    if _struct_2I2d is None:
        _struct_2I2d = struct.Struct("<2I2d")
    return _struct_2I2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Iiq = None
def _get_struct_Iiq():
    global _struct_Iiq
    if _struct_Iiq is None:
        _struct_Iiq = struct.Struct("<Iiq")
    return _struct_Iiq
