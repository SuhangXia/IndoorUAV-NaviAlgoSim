# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quadrotor_msgs/ReplanCheck.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ReplanCheck(genpy.Message):
  _md5sum = "6a31f08865d3c08f64743e11538e9c4b"
  _type = "quadrotor_msgs/ReplanCheck"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
geometry_msgs/Vector3 start_velocity
geometry_msgs/Vector3 start_acceleration
geometry_msgs/Point[] plan_points
geometry_msgs/Point[] check_points
geometry_msgs/Vector3 stop_velocity
geometry_msgs/Vector3 stop_acceleration
float64               replan_time_length
float64               check_points_time_interval
float64               plan_points_time_interval
uint32                trajectory_id
float64               replan_to_global_time

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','start_velocity','start_acceleration','plan_points','check_points','stop_velocity','stop_acceleration','replan_time_length','check_points_time_interval','plan_points_time_interval','trajectory_id','replan_to_global_time']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Point[]','geometry_msgs/Point[]','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float64','uint32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,start_velocity,start_acceleration,plan_points,check_points,stop_velocity,stop_acceleration,replan_time_length,check_points_time_interval,plan_points_time_interval,trajectory_id,replan_to_global_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ReplanCheck, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.start_acceleration is None:
        self.start_acceleration = geometry_msgs.msg.Vector3()
      if self.plan_points is None:
        self.plan_points = []
      if self.check_points is None:
        self.check_points = []
      if self.stop_velocity is None:
        self.stop_velocity = geometry_msgs.msg.Vector3()
      if self.stop_acceleration is None:
        self.stop_acceleration = geometry_msgs.msg.Vector3()
      if self.replan_time_length is None:
        self.replan_time_length = 0.
      if self.check_points_time_interval is None:
        self.check_points_time_interval = 0.
      if self.plan_points_time_interval is None:
        self.plan_points_time_interval = 0.
      if self.trajectory_id is None:
        self.trajectory_id = 0
      if self.replan_to_global_time is None:
        self.replan_to_global_time = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.start_velocity = geometry_msgs.msg.Vector3()
      self.start_acceleration = geometry_msgs.msg.Vector3()
      self.plan_points = []
      self.check_points = []
      self.stop_velocity = geometry_msgs.msg.Vector3()
      self.stop_acceleration = geometry_msgs.msg.Vector3()
      self.replan_time_length = 0.
      self.check_points_time_interval = 0.
      self.plan_points_time_interval = 0.
      self.trajectory_id = 0
      self.replan_to_global_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.start_acceleration.x, _x.start_acceleration.y, _x.start_acceleration.z))
      length = len(self.plan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.check_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.check_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9dId().pack(_x.stop_velocity.x, _x.stop_velocity.y, _x.stop_velocity.z, _x.stop_acceleration.x, _x.stop_acceleration.y, _x.stop_acceleration.z, _x.replan_time_length, _x.check_points_time_interval, _x.plan_points_time_interval, _x.trajectory_id, _x.replan_to_global_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.start_acceleration is None:
        self.start_acceleration = geometry_msgs.msg.Vector3()
      if self.plan_points is None:
        self.plan_points = None
      if self.check_points is None:
        self.check_points = None
      if self.stop_velocity is None:
        self.stop_velocity = geometry_msgs.msg.Vector3()
      if self.stop_acceleration is None:
        self.stop_acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.start_acceleration.x, _x.start_acceleration.y, _x.start_acceleration.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.plan_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.check_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.check_points.append(val1)
      _x = self
      start = end
      end += 84
      (_x.stop_velocity.x, _x.stop_velocity.y, _x.stop_velocity.z, _x.stop_acceleration.x, _x.stop_acceleration.y, _x.stop_acceleration.z, _x.replan_time_length, _x.check_points_time_interval, _x.plan_points_time_interval, _x.trajectory_id, _x.replan_to_global_time,) = _get_struct_9dId().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.start_acceleration.x, _x.start_acceleration.y, _x.start_acceleration.z))
      length = len(self.plan_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.plan_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.check_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.check_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_9dId().pack(_x.stop_velocity.x, _x.stop_velocity.y, _x.stop_velocity.z, _x.stop_acceleration.x, _x.stop_acceleration.y, _x.stop_acceleration.z, _x.replan_time_length, _x.check_points_time_interval, _x.plan_points_time_interval, _x.trajectory_id, _x.replan_to_global_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_velocity is None:
        self.start_velocity = geometry_msgs.msg.Vector3()
      if self.start_acceleration is None:
        self.start_acceleration = geometry_msgs.msg.Vector3()
      if self.plan_points is None:
        self.plan_points = None
      if self.check_points is None:
        self.check_points = None
      if self.stop_velocity is None:
        self.stop_velocity = geometry_msgs.msg.Vector3()
      if self.stop_acceleration is None:
        self.stop_acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.start_velocity.x, _x.start_velocity.y, _x.start_velocity.z, _x.start_acceleration.x, _x.start_acceleration.y, _x.start_acceleration.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.plan_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.plan_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.check_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.check_points.append(val1)
      _x = self
      start = end
      end += 84
      (_x.stop_velocity.x, _x.stop_velocity.y, _x.stop_velocity.z, _x.stop_acceleration.x, _x.stop_acceleration.y, _x.stop_acceleration.z, _x.replan_time_length, _x.check_points_time_interval, _x.plan_points_time_interval, _x.trajectory_id, _x.replan_to_global_time,) = _get_struct_9dId().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_9dId = None
def _get_struct_9dId():
    global _struct_9dId
    if _struct_9dId is None:
        _struct_9dId = struct.Struct("<9dId")
    return _struct_9dId
