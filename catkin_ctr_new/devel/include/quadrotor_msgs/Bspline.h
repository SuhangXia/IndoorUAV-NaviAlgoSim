// Generated by gencpp from file quadrotor_msgs/Bspline.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_BSPLINE_H
#define QUADROTOR_MSGS_MESSAGE_BSPLINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct Bspline_
{
  typedef Bspline_<ContainerAllocator> Type;

  Bspline_()
    : action(0)
    , order(0)
    , traj_id(0)
    , knots()
    , pts()
    , start_time()
    , time_extra(0.0)
    , replan_to_global_time(0.0)  {
    }
  Bspline_(const ContainerAllocator& _alloc)
    : action(0)
    , order(0)
    , traj_id(0)
    , knots(_alloc)
    , pts(_alloc)
    , start_time()
    , time_extra(0.0)
    , replan_to_global_time(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _action_type;
  _action_type action;

   typedef int32_t _order_type;
  _order_type order;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _knots_type;
  _knots_type knots;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pts_type;
  _pts_type pts;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef double _time_extra_type;
  _time_extra_type time_extra;

   typedef double _replan_to_global_time_type;
  _replan_to_global_time_type replan_to_global_time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_ADD)
  #undef ACTION_ADD
#endif
#if defined(_WIN32) && defined(ACTION_ABORT)
  #undef ACTION_ABORT
#endif
#if defined(_WIN32) && defined(ACTION_WARN_START)
  #undef ACTION_WARN_START
#endif
#if defined(_WIN32) && defined(ACTION_WARN_FINAL)
  #undef ACTION_WARN_FINAL
#endif
#if defined(_WIN32) && defined(ACTION_WARN_IMPOSSIBLE)
  #undef ACTION_WARN_IMPOSSIBLE
#endif

  enum {
    ACTION_ADD = 1u,
    ACTION_ABORT = 2u,
    ACTION_WARN_START = 3u,
    ACTION_WARN_FINAL = 4u,
    ACTION_WARN_IMPOSSIBLE = 5u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::Bspline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::Bspline_<ContainerAllocator> const> ConstPtr;

}; // struct Bspline_

typedef ::quadrotor_msgs::Bspline_<std::allocator<void> > Bspline;

typedef boost::shared_ptr< ::quadrotor_msgs::Bspline > BsplinePtr;
typedef boost::shared_ptr< ::quadrotor_msgs::Bspline const> BsplineConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::Bspline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::Bspline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::Bspline_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Bspline_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.order == rhs.order &&
    lhs.traj_id == rhs.traj_id &&
    lhs.knots == rhs.knots &&
    lhs.pts == rhs.pts &&
    lhs.start_time == rhs.start_time &&
    lhs.time_extra == rhs.time_extra &&
    lhs.replan_to_global_time == rhs.replan_to_global_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::Bspline_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Bspline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Bspline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Bspline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Bspline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8380218fb47e65620f86497dd7aa15f";
  }

  static const char* value(const ::quadrotor_msgs::Bspline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8380218fb47e656ULL;
  static const uint64_t static_value2 = 0x20f86497dd7aa15fULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/Bspline";
  }

  static const char* value(const ::quadrotor_msgs::Bspline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the action command for trajectory server.\n"
"uint32 ACTION_ADD                  =   1\n"
"uint32 ACTION_ABORT                =   2\n"
"uint32 ACTION_WARN_START           =   3\n"
"uint32 ACTION_WARN_FINAL           =   4\n"
"uint32 ACTION_WARN_IMPOSSIBLE      =   5\n"
"uint32 action\n"
"\n"
"int32 order\n"
"int64 traj_id\n"
"float64[] knots\n"
"geometry_msgs/Point[] pts\n"
"time start_time\n"
"float64 time_extra\n"
"float64 replan_to_global_time\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::Bspline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.order);
      stream.next(m.traj_id);
      stream.next(m.knots);
      stream.next(m.pts);
      stream.next(m.start_time);
      stream.next(m.time_extra);
      stream.next(m.replan_to_global_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bspline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::Bspline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::Bspline_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.action);
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "knots[]" << std::endl;
    for (size_t i = 0; i < v.knots.size(); ++i)
    {
      s << indent << "  knots[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.knots[i]);
    }
    s << indent << "pts[]" << std::endl;
    for (size_t i = 0; i < v.pts.size(); ++i)
    {
      s << indent << "  pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pts[i]);
    }
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "time_extra: ";
    Printer<double>::stream(s, indent + "  ", v.time_extra);
    s << indent << "replan_to_global_time: ";
    Printer<double>::stream(s, indent + "  ", v.replan_to_global_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_BSPLINE_H
