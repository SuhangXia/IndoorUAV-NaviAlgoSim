// Generated by gencpp from file quadrotor_msgs/Replan.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_REPLAN_H
#define QUADROTOR_MSGS_MESSAGE_REPLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct Replan_
{
  typedef Replan_<ContainerAllocator> Type;

  Replan_()
    : start_velocity()
    , start_acceleration()
    , plan()
    , stop_velocity()
    , stop_acceleration()
    , replan_time(0.0)  {
    }
  Replan_(const ContainerAllocator& _alloc)
    : start_velocity(_alloc)
    , start_acceleration(_alloc)
    , plan(_alloc)
    , stop_velocity(_alloc)
    , stop_acceleration(_alloc)
    , replan_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _start_velocity_type;
  _start_velocity_type start_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _start_acceleration_type;
  _start_acceleration_type start_acceleration;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _stop_velocity_type;
  _stop_velocity_type stop_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _stop_acceleration_type;
  _stop_acceleration_type stop_acceleration;

   typedef double _replan_time_type;
  _replan_time_type replan_time;





  typedef boost::shared_ptr< ::quadrotor_msgs::Replan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::Replan_<ContainerAllocator> const> ConstPtr;

}; // struct Replan_

typedef ::quadrotor_msgs::Replan_<std::allocator<void> > Replan;

typedef boost::shared_ptr< ::quadrotor_msgs::Replan > ReplanPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::Replan const> ReplanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::Replan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::Replan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::Replan_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Replan_<ContainerAllocator2> & rhs)
{
  return lhs.start_velocity == rhs.start_velocity &&
    lhs.start_acceleration == rhs.start_acceleration &&
    lhs.plan == rhs.plan &&
    lhs.stop_velocity == rhs.stop_velocity &&
    lhs.stop_acceleration == rhs.stop_acceleration &&
    lhs.replan_time == rhs.replan_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::Replan_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Replan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Replan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Replan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Replan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Replan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Replan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Replan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::Replan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73a17ace4b8b54cf9b4974fbea003b7f";
  }

  static const char* value(const ::quadrotor_msgs::Replan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73a17ace4b8b54cfULL;
  static const uint64_t static_value2 = 0x9b4974fbea003b7fULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::Replan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/Replan";
  }

  static const char* value(const ::quadrotor_msgs::Replan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::Replan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#data structure\n"
"geometry_msgs/Vector3 start_velocity\n"
"geometry_msgs/Vector3 start_acceleration\n"
"nav_msgs/Path         plan\n"
"geometry_msgs/Vector3 stop_velocity\n"
"geometry_msgs/Vector3 stop_acceleration\n"
"float64               replan_time\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::quadrotor_msgs::Replan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::Replan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_velocity);
      stream.next(m.start_acceleration);
      stream.next(m.plan);
      stream.next(m.stop_velocity);
      stream.next(m.stop_acceleration);
      stream.next(m.replan_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Replan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::Replan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::Replan_<ContainerAllocator>& v)
  {
    s << indent << "start_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.start_velocity);
    s << indent << "start_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.start_acceleration);
    s << indent << "plan: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    s << indent << "stop_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_velocity);
    s << indent << "stop_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_acceleration);
    s << indent << "replan_time: ";
    Printer<double>::stream(s, indent + "  ", v.replan_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_REPLAN_H
